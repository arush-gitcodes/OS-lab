#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_PROCESSES 100

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int priority;
};

void sjf_preemptive(struct Process processes[], int n);
void round_robin(struct Process processes[], int n, int quantum);
void priority_non_preemptive(struct Process processes[], int n);
void calculate_times(struct Process processes[], int n);
void print_results(struct Process processes[], int n);

int main() {
    struct Process processes[MAX_PROCESSES];
    int n, choice, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    while (1) {
        printf("\nProcess Scheduling Menu:\n");
        printf("1. Preemptive SJF\n");
        printf("2. Round Robin\n");
        printf("3. Non-preemptive Priority\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                sjf_preemptive(processes, n);
                break;
            case 2:
                printf("Enter time quantum for Round Robin: ");
                scanf("%d", &quantum);
                round_robin(processes, n, quantum);
                break;
            case 3:
                priority_non_preemptive(processes, n);
                break;
            case 4:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}

void sjf_preemptive(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;
    int shortest = 0;

    while (completed != n) {
        shortest = -1;
        int min_burst = INT_MAX;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].remaining_time < min_burst) {
                    min_burst = processes[i].remaining_time;
                    shortest = i;
                }
            }
        }

        if (shortest == -1) {
            current_time++;
        } else {
            processes[shortest].remaining_time--;
            current_time++;

            if (processes[shortest].remaining_time == 0) {
                completed++;
                processes[shortest].completion_time = current_time;
            }
        }
    }

    calculate_times(processes, n);
    print_results(processes, n);
}

void round_robin(struct Process processes[], int n, int quantum) {
    int remaining_processes = n;
    int current_time = 0;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time <= quantum) {
                    current_time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    processes[i].completion_time = current_time;
                    remaining_processes--;
                } else {
                    current_time += quantum;
                    processes[i].remaining_time -= quantum;
                }
            }
        }
    }

    calculate_times(processes, n);
    print_results(processes, n);
}

void priority_non_preemptive(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;

    while (completed != n) {
        int highest_priority = -1;
        int max_priority = INT_MIN;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].priority > max_priority) {
                    max_priority = processes[i].priority;
                    highest_priority = i;
                }
            }
        }

        if (highest_priority == -1) {
            current_time++;
        } else {
            current_time += processes[highest_priority].burst_time;
            processes[highest_priority].remaining_time = 0;
            processes[highest_priority].completion_time = current_time;
            completed++;
        }
    }

    calculate_times(processes, n);
    print_results(processes, n);
}

void calculate_times(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    }
}

void print_results(struct Process processes[], int n) {
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time,
               processes[i].waiting_time);
    }

    float avg_turnaround_time = 0, avg_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        avg_turnaround_time += processes[i].turnaround_time;
        avg_waiting_time += processes[i].waiting_time;
    }
    avg_turnaround_time /= n;
    avg_waiting_time /= n;

    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
}
