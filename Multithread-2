//fibnacci
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define MAX_FIB 100

int n;
unsigned long long fib[MAX_FIB];

void *generate_fibonacci(void *arg) {
    fib[0] = 0;
    if (n > 1) fib[1] = 1;
    for (int i = 2; i < n; i++) {
        fib[i] = fib[i-1] + fib[i-2];
    }
    return NULL;
}

int main() {
    printf("Enter the number of Fibonacci numbers to generate (1-%d): ", MAX_FIB);
    scanf("%d", &n);

    if (n <= 0 || n > MAX_FIB) {
        printf("Please enter a number between 1 and %d\n", MAX_FIB);
        return 1;
    }

    pthread_t thread;
    pthread_create(&thread, NULL, generate_fibonacci, NULL);
    pthread_join(thread, NULL);

    printf("Fibonacci Sequence:\n");
    for (int i = 0; i < n; i++) {
        printf("%llu ", fib[i]);
    }
    printf("\n");

    return 0;
}

//prime numbers
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdbool.h>

#define MAX_PRIMES 1000

int start, end;
int primes[MAX_PRIMES];
int prime_count = 0;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

bool is_prime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}

void* find_primes(void* arg) {
    for (int i = start; i <= end; i++) {
        if (is_prime(i)) {
            pthread_mutex_lock(&mutex);
            if (prime_count < MAX_PRIMES) {
                primes[prime_count++] = i;
            }
            pthread_mutex_unlock(&mutex);
        }
    }
    return NULL;
}

int main() {
    printf("Enter the starting number: ");
    scanf("%d", &start);
    printf("Enter the ending number: ");
    scanf("%d", &end);

    if (start > end) {
        printf("Starting number should be less than or equal to ending number.\n");
        return 1;
    }

    pthread_t thread1, thread2;
    pthread_create(&thread1, NULL, find_primes, NULL);
    pthread_create(&thread2, NULL, find_primes, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Prime numbers between %d and %d are:\n", start, end);
    for (int i = 0; i < prime_count; i++) {
        printf("%d ", primes[i]);
    }
    printf("\nTotal prime numbers found: %d\n", prime_count);

    return 0;
}
