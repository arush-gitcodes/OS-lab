#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

sem_t mutex;
sem_t s[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void test(int phil_num) {
    if (state[phil_num] == HUNGRY &&
        state[(phil_num + 4) % NUM_PHILOSOPHERS] != EATING &&
        state[(phil_num + 1) % NUM_PHILOSOPHERS] != EATING) {
        state[phil_num] = EATING;
        sem_post(&s[phil_num]);
    }
}

void take_forks(int phil_num) {
    sem_wait(&mutex);
    state[phil_num] = HUNGRY;
    printf("Philosopher %d is Hungry\n", phil_num + 1);
    test(phil_num);
    sem_post(&mutex);
    sem_wait(&s[phil_num]);
}

void put_forks(int phil_num) {
    sem_wait(&mutex);
    state[phil_num] = THINKING;
    printf("Philosopher %d putting fork %d and %d down\n", 
           phil_num + 1, phil_num + 1, (phil_num + 1) % NUM_PHILOSOPHERS + 1);
    printf("Philosopher %d is thinking\n", phil_num + 1);
    test((phil_num + 4) % NUM_PHILOSOPHERS);
    test((phil_num + 1) % NUM_PHILOSOPHERS);
    sem_post(&mutex);
}

void* philosopher(void* num) {
    int phil_num = *(int*)num;

    while (1) {
        printf("Philosopher %d is thinking\n", phil_num + 1);
        sleep(rand() % 3);
        take_forks(phil_num);
        printf("Philosopher %d is eating\n", phil_num + 1);
        sleep(rand() % 3);
        put_forks(phil_num);
    }
}

int main() {
    int i;
    pthread_t thread_id[NUM_PHILOSOPHERS];
    int philosopher_nums[NUM_PHILOSOPHERS];

    sem_init(&mutex, 0, 1);

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&s[i], 0, 0);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_nums[i] = i;
        pthread_create(&thread_id[i], NULL, philosopher, &philosopher_nums[i]);
        printf("Philosopher %d is thinking\n", i + 1);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(thread_id[i], NULL);
    }

    return 0;
}
