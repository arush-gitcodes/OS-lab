#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 3
#define NUM_WRITERS 2
#define NUM_ITERATIONS 5

int shared_resource = 0;
int reader_count = 0;

sem_t mutex, write_sem;

void *reader(void *arg) {
    int reader_id = *(int*)arg;
    
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        // Entry section
        sem_wait(&mutex);
        reader_count++;
        if (reader_count == 1) {
            sem_wait(&write_sem);
        }
        sem_post(&mutex);

        // Reading section
        printf("Reader %d is reading. Value: %d\n", reader_id, shared_resource);
        sleep(1);  // Simulate reading

        // Exit section
        sem_wait(&mutex);
        reader_count--;
        if (reader_count == 0) {
            sem_post(&write_sem);
        }
        sem_post(&mutex);

        sleep(rand() % 3);  // Some random processing time
    }

    return NULL;
}

void *writer(void *arg) {
    int writer_id = *(int*)arg;
    
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        sem_wait(&write_sem);

        // Writing section
        shared_resource++;
        printf("Writer %d is writing. New value: %d\n", writer_id, shared_resource);
        sleep(2);  // Simulate writing

        sem_post(&write_sem);

        sleep(rand() % 3);  // Some random processing time
    }

    return NULL;
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    int reader_ids[NUM_READERS], writer_ids[NUM_WRITERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&write_sem, 0, 1);

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        reader_ids[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &reader_ids[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        writer_ids[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writer_ids[i]);
    }

    // Join reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }

    // Join writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    // Cleanup
    sem_destroy(&mutex);
    sem_destroy(&write_sem);

    return 0;
}
